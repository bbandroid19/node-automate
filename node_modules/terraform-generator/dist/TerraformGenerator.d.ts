import { Block, Resource, Data, Module, Output, Provider, Variable, Backend, ResourceToDataOptions } from '.';
export declare type TerraformVersion = '0.11' | '0.12';
/**
 * @param version Terraform version
 */
export interface TerraformGeneratorOptions {
    version: TerraformVersion;
}
/**
 * @param dir directoty, default = .
 * @param filename Terraform filename, must ends with .tf, default = terraform.tf
 * @param format use 'terraform fmt' to format the configuration, Terraform must be installed, default = false
 */
export interface WriteOptions {
    dir?: string;
    filename?: string;
    format?: boolean;
}
export default class TerraformGenerator {
    private readonly options;
    private readonly arguments;
    private readonly blocks;
    /**
     * Construct Terraform generator.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param options options
     * @param args arguments
     */
    constructor(options: TerraformGeneratorOptions, args?: object);
    /**
     * Generate Terraform configuration as string.
     */
    generate(): string;
    /**
     * Write Terraform configuration to a file.
     *
     * @param options options
     */
    write(options?: WriteOptions): void;
    /**
     * Add blocks into Terraform.
     *
     * @param blocks blocks
     */
    addBlocks(...blocks: Block[]): TerraformGenerator;
    /**
     * Add provider into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param args arguments
     */
    provider(type: string, args?: object): Provider;
    /**
     * Add resource into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param name name
     * @param args arguments
     */
    resource(type: string, name: string, args?: object): Resource;
    /**
     * Convert resource into data source and add it into Terraform.
     *
     * @param resource resource
     * @param options options
     * @param argNames names of resource arguments to be converted into data source arguments;
     * use array for name mapping, position 0 = original resource's argument name, position 1 = mapped data source's argument name
     * @param args extra arguments
     */
    dataFromResource(resource: Resource, options: ResourceToDataOptions, argNames: (string | [string, string])[], args?: object): Data;
    /**
     * Add data source into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param name name
     * @param args arguments
     */
    data(type: string, name: string, args?: object): Data;
    /**
     * Add module into Terraform.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param name name
     * @param args arguments
     */
    module(name: string, args?: object): Module;
    /**
     * Add output into Terraform.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param name name
     * @param args arguments
     */
    output(name: string, args?: object): Output;
    /**
     * Add provider into Terraform.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param name name
     * @param args arguments
     */
    variable(name: string, args?: object): Variable;
    /**
     * Add backend into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param args arguments
     */
    backend(type: string, args?: object): Backend;
}
