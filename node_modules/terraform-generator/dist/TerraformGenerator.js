"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shelljs_1 = __importDefault(require("shelljs"));
const child_process_1 = __importDefault(require("child_process"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const _1 = require(".");
const TerraformGeneratorUtils_1 = __importDefault(require("./TerraformGeneratorUtils"));
;
class TerraformGenerator {
    /**
     * Construct Terraform generator.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param options options
     * @param args arguments
     */
    constructor(options, args) {
        this.blocks = [];
        this.options = options;
        this.arguments = args;
    }
    /**
     * Generate Terraform configuration as string.
     */
    generate() {
        let str = '';
        if (this.arguments || this.blocks.filter(block => block instanceof _1.Backend).length > 0) {
            str += 'terraform {\n';
            str += TerraformGeneratorUtils_1.default.argumentsToString(this.options.version, this.arguments);
            this.blocks.forEach(block => {
                if (block instanceof _1.Backend) {
                    str += block.toTerraform(this.options.version);
                }
            });
            str += '}\n\n';
        }
        this.blocks.forEach(block => {
            if (!(block instanceof _1.Backend)) {
                str += block.toTerraform(this.options.version);
            }
        });
        return str;
    }
    /**
     * Write Terraform configuration to a file.
     *
     * @param options options
     */
    write(options) {
        if (!options) {
            options = {};
        }
        if (!options.dir) {
            options.dir = '.';
        }
        if (!options.filename) {
            options.filename = 'terraform.tf';
        }
        if (!options.filename.endsWith('.tf')) {
            options.filename += '.tf';
        }
        shelljs_1.default.mkdir('-p', options.dir);
        fs_1.default.writeFileSync(path_1.default.join(options.dir, options.filename), this.generate());
        if (options.format) {
            child_process_1.default.execSync('terraform fmt', { cwd: options.dir });
        }
    }
    /**
     * Add blocks into Terraform.
     *
     * @param blocks blocks
     */
    addBlocks(...blocks) {
        blocks.forEach(block => this.blocks.push(block));
        return this;
    }
    /**
     * Add provider into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param args arguments
     */
    provider(type, args) {
        const block = new _1.Provider(type, args);
        this.addBlocks(block);
        return block;
    }
    /**
     * Add resource into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param name name
     * @param args arguments
     */
    resource(type, name, args) {
        const block = new _1.Resource(type, name, args);
        this.addBlocks(block);
        return block;
    }
    /**
     * Convert resource into data source and add it into Terraform.
     *
     * @param resource resource
     * @param options options
     * @param argNames names of resource arguments to be converted into data source arguments;
     * use array for name mapping, position 0 = original resource's argument name, position 1 = mapped data source's argument name
     * @param args extra arguments
     */
    dataFromResource(resource, options, argNames, args) {
        const block = resource.toData(options, argNames, args);
        this.addBlocks(block);
        return block;
    }
    /**
     * Add data source into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param name name
     * @param args arguments
     */
    data(type, name, args) {
        const block = new _1.Data(type, name, args);
        this.addBlocks(block);
        return block;
    }
    /**
     * Add module into Terraform.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param name name
     * @param args arguments
     */
    module(name, args) {
        const block = new _1.Module(name, args);
        this.addBlocks(block);
        return block;
    }
    /**
     * Add output into Terraform.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param name name
     * @param args arguments
     */
    output(name, args) {
        const block = new _1.Output(name, args);
        this.addBlocks(block);
        return block;
    }
    /**
     * Add provider into Terraform.
     * Refer to Terraform documentation on what can be put as arguments.
     *
     * @param name name
     * @param args arguments
     */
    variable(name, args) {
        const block = new _1.Variable(name, args);
        this.addBlocks(block);
        return block;
    }
    /**
     * Add backend into Terraform.
     * Refer to Terraform documentation on what can be put as type & arguments.
     *
     * @param type type
     * @param args arguments
     */
    backend(type, args) {
        const block = new _1.Backend(type, args);
        this.addBlocks(block);
        return block;
    }
}
exports.default = TerraformGenerator;
