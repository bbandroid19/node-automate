"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
class TerraformGeneratorUtils {
    static argumentsToString(version, args) {
        let str = '';
        for (const key in args) {
            str += this.argumentToString(version, key, args[key]);
        }
        return str;
    }
    ;
    static isObjectArgument(value) {
        if (['string', 'number', 'boolean'].indexOf(typeof value) >= 0
            || value instanceof _1.Block || value instanceof _1.Argument || value instanceof _1.Map) {
            return false;
        }
        else if (typeof value === 'object') {
            return true;
        }
        else {
            throw new Error(`Invalid value: ${value}`);
        }
    }
    ;
    static argumentToString(version, key, value) {
        try {
            if (value == null) {
                return '';
            }
            let operator = ' = ';
            let isObjectArray = false;
            if (Array.isArray(value)) {
                if (value.length === 0 || this.isObjectArgument(value[0])) {
                    operator = ' ';
                    isObjectArray = true;
                }
            }
            else {
                if (this.isObjectArgument(value)) {
                    operator = ' ';
                }
            }
            if (isObjectArray) {
                let str = '';
                if (Array.isArray(value)) {
                    value.forEach(element => {
                        str += `${key}${operator}${this.argumentValueToString(version, element)}\n`;
                    });
                }
                return str;
            }
            else {
                return `${key}${operator}${this.argumentValueToString(version, value)}\n`;
            }
        }
        catch (err) {
            throw new Error(`Invalid value: ${key} = ${value}`);
        }
    }
    ;
    static argumentValueToString(version, value) {
        if (value instanceof _1.Block) {
            return this.argumentValueToString(version, value.asArgument());
        }
        else if (value instanceof _1.Argument) {
            if (version && version === '0.11' && !value.asIs) {
                return `"\${${value.toTerraform()}}"`;
            }
            else {
                return value.toTerraform();
            }
        }
        else if (value instanceof _1.Map) {
            return this.argumentValueToString(version, value.args);
        }
        else if (['string', 'number', 'boolean'].indexOf(typeof value) >= 0) {
            return JSON.stringify(value);
        }
        else if (typeof value === 'object') {
            if (Array.isArray(value)) {
                let str = '[\n';
                value.forEach(element => {
                    str += `${this.argumentValueToString(version, element)},\n`;
                });
                str += ']';
                return str;
            }
            else {
                let str = '{\n';
                for (const key in value) {
                    str += this.argumentToString(version, key, value[key]);
                }
                str += '}';
                return str;
            }
        }
        else {
            throw new Error(`Invalid value: ${value}`);
        }
    }
}
exports.default = TerraformGeneratorUtils;
