"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const TerraformGeneratorUtils_1 = __importDefault(require("../TerraformGeneratorUtils"));
class Function extends __1.Argument {
    /**
     * Construct function argument.
     *
     * @param name function name
     * @param args function arguments
     */
    constructor(name, ...args) {
        super(Function.constructArgument(name, ...args));
    }
    static constructArgument(fn, ...args) {
        if (!fn || !fn.trim()) {
            throw new Error('Function name cannot be empty.');
        }
        if (args.filter(arg => arg == null).length > 0) {
            throw new Error(`Invalid function argument: ${args}`);
        }
        let str = `${fn}(`;
        args.forEach((arg, i) => {
            str += TerraformGeneratorUtils_1.default.argumentValueToString(null, arg);
            if (i < args.length - 1) {
                str += ', ';
            }
        });
        str += ')';
        return str;
    }
}
exports.default = Function;
/**
 * Convenient function to construct new function.
 *
 * @param name function name
 * @param args function arguments
 */
exports.fn = (name, ...args) => new Function(name, ...args);
