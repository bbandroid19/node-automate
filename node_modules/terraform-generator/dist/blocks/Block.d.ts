import { TerraformVersion, Attribute, Argument } from '..';
export default abstract class Block {
    readonly blockType: string;
    readonly blockNames: string[];
    private readonly arguments;
    /**
     * Construct block.
     *
     * @param type type
     * @param names names
     * @param args arguments
     */
    constructor(type: string, names: string[], args?: object);
    /**
     * Get arguments.
     */
    getArguments(): object;
    /**
     * Get argument by key.
     *
     * @param key key
     */
    getArgument(key: string): any;
    /**
     * Set argument.
     *
     * @param key key
     * @param value value
     */
    setArgument(key: string, value: any): Block;
    /**
     * Set arguments.
     *
     * @param args arguments
     */
    setArguments(args: object): Block;
    /**
     * Delete argument by key.
     *
     * @param key key
     */
    deleteArgument(key: string): Block;
    /**
     * To Terraform representation.
     *
     * @param version Terraform version
     */
    toTerraform(version: TerraformVersion): string;
    /**
     * Represent block as argument.
     */
    abstract asArgument(): Argument;
    /**
     * Get block's attribute.
     *
     * @param name attribute name
     */
    abstract attr(name: string): Attribute;
    private validateIdentifier;
}
