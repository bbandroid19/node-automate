"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TerraformGeneratorUtils_1 = __importDefault(require("../TerraformGeneratorUtils"));
class Block {
    /**
     * Construct block.
     *
     * @param type type
     * @param names names
     * @param args arguments
     */
    constructor(type, names, args) {
        this.validateIdentifier(type);
        names.forEach(name => {
            this.validateIdentifier(name);
        });
        this.blockType = type;
        this.blockNames = names;
        this.arguments = args ? args : {};
    }
    /**
     * Get arguments.
     */
    getArguments() {
        return this.arguments;
    }
    /**
     * Get argument by key.
     *
     * @param key key
     */
    getArgument(key) {
        return this.arguments[key];
    }
    /**
     * Set argument.
     *
     * @param key key
     * @param value value
     */
    setArgument(key, value) {
        this.arguments[key] = value;
        return this;
    }
    /**
     * Set arguments.
     *
     * @param args arguments
     */
    setArguments(args) {
        for (const key in args) {
            this.arguments[key] = args[key];
        }
        return this;
    }
    /**
     * Delete argument by key.
     *
     * @param key key
     */
    deleteArgument(key) {
        delete this.arguments[key];
        return this;
    }
    /**
     * To Terraform representation.
     *
     * @param version Terraform version
     */
    toTerraform(version) {
        let str = this.blockType;
        this.blockNames.forEach(name => {
            str += ` "${name}"`;
        });
        str += '{\n';
        str += TerraformGeneratorUtils_1.default.argumentsToString(version, this.arguments);
        str += '}\n\n';
        return str;
    }
    validateIdentifier(identifier) {
        if (!identifier.match(/^[a-zA-Z_\-]{1}[0-9a-zA-Z_\-]*$/)) {
            throw new Error(`Invalid identifier: ${identifier}`);
        }
    }
}
exports.default = Block;
